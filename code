#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <QTRSensors.h>

int IN1 = 4; //Pin pour Le Capteur Gauche
int IN4 = 7; //Pin pour Le Capteur Droite
int GA = 12, GB = 3, DA = 13, DB = 11; //Pin pour Deux moteurs (GA et GB pour le moteur Gauche, DA et DB pour le moteur de droite)
int Moteur_sens1 = ?; // *Pin moteur cremaillere A DECIDER*
int Moteur_sens2 = ?; // *Pin moteur cremaillere*
int microrupteur = ?; // *Pin capteur pression*

LiquidCrystal_I2C lcd(0x27, 20, 4);

QTRSensors qtr;

const uint8_t SensorCount = 2;
uint16_t sensorValues[SensorCount];

void setup(){

pinMode (2, INPUT_PULLUP);
while(digitalRead(2));

{
  // configure the sensors
  qtr.setTypeAnalog();
  qtr.setSensorPins((const uint8_t[]){A0, A1}, SensorCount);
  qtr.setEmitterPin(2);

  Serial.begin(9600);
}

{
  Serial.begin(9550);
  pinMode(IN1, INPUT);
  pinMode(IN4, INPUT);
  pinMode(DA, OUTPUT);
  pinMode(DB, OUTPUT);
  pinMode(GA, OUTPUT);
  pinMode(GB, OUTPUT);
}
  lcd.init();
}


  
//on Crée Les Fonctions

void d() //Fonction qui permet au robot de tourner a droite
{
  digitalWrite(DA, LOW);
  analogWrite(DB, 55);
  analogWrite(GA, 55);
  digitalWrite(GB, LOW);
}

void g() //Fonction qui permet au robot de tourner a gauche

{
  analogWrite(DA, 55);
  digitalWrite(DB, LOW);
  digitalWrite(GA, LOW);
  analogWrite(GB, 55);
}

void av() //Fonction qui permet au robot de continuer tout droit

{
  digitalWrite(DA, LOW);
  analogWrite(DB, 55);
  digitalWrite(GA, LOW);
  analogWrite(GB, 55);
}

void loop() {

  testPushBtn();

  lcd.setCursor(0, 0);
  lcd.print("      Va");

  qtr.read(sensorValues);

  if (microrupteur0 == HIGH) {
    charge();
  }

  if (sensorValues[1]>10 && sensorValues[2]<10) //S'il y a du noir à gauche et du blanc à droite, tourner à gauche
  {
    lcd.setCursor(0, 1);
    lcd.print("   a gauche");
    Serial.println("Tourner à gauche");
    g();
  }
  else if (sensorValues[1]<10 && sensorValues[2]>10) //S'il y a du blanc à gauche et du noir à droite, tourner à droite
  {
    lcd.setCursor(0, 1);
    lcd.print("   a droite");
    Serial.println("Tourner à droite");
    d();
  }
  else if (sensorValues[1]<10 && sensorValues[2]<10) //Si les conditions plus haut ne s'appliquent pas, continuer tout droit
  {
    lcd.setCursor(0, 1);
    lcd.print("   a gauche");
    Serial.println("Continuer tout droit");
    av();
  }

 else //fin de course = decharger
 {
    lcd.setCursor(0, 1);
    lcd.print("  Porter");
    Serial.println("Chargement");
    decharge();
 }

}

void testPushBtn( ) {

  btnVal = analogRead(btnPin);
  if (btnVal < 200) {
    btnState = true;
    
  }
  
  if (oldbtnState = btnState) {
    if(btnState==true){
      Serial.print(F("Boutton appuye"));

    }
    else
      Serial.print("Bouton normal");
  }

  oldbtnState != btnState;
}

void decharge( ) {
  digitalWrite(Moteur_sens1, HIGH); // Baisse cremaillere
  digitalWrite(Moteur_sens2, LOW);
  delay(1000); // temps de rotation A MODIFIER
}


void charge() {
  digitalWrite(Moteur_sens1, LOW); // Baisse cremaillere
  digitalWrite(Moteur_sens2, HIGH);
  delay(1000); // temps de rotation A MODIFIER
}
